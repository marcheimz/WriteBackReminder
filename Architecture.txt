We need the following:

- a FastAPI webserver.

Functionality to have different selected users (hard coded list for now).

This app should do the following:

Keep track of conversations and create reminders to write back based on history with a person.

Every time I talk to a person as a user, I can select that person from a dropdown and write as a text a summary of the conversation.
This will then be stored in some simple database key(user, person_that_user_talked_with) -> List[conversations].

From time to time a script (this should be specifyable) is run and all of the recent conversations are fed into an LLM and the llm makes suggestions on what the user should do next. It should assign an urgency of how important a response right now is.

I want for now a simple webapp that mostly uses forms that communicates with a python backend (FastAPI)

use the venv38


Actual implementation:

- `writebackreminder/app.py` exposes a FastAPI application factory with routes for logging in (`/`, `/login/google`, `/auth/google`, `/logout`) and managing conversations (`/conversations`, `/log`). The selected user is stored in a session (Starlette `SessionMiddleware`).
- Google OAuth sign-in is optional. Client credentials are read from `secrets/google_oauth.json` (path configured in `secrets/config.json`). The app performs the OAuth flow directly against Google endpoints using `httpx`.
- The app persists data via `ConversationStore` (`writebackreminder/datastore.py`) using JSON files under `userdata/` and `userdata/recommendations/`.
- Conversation logging validates required fields, records entries, and redirects back to the history view for the chosen person.
- `templates/login.html` renders the landing/login page (Google sign-in). `templates/index.html` provides the dashboard for known contacts and history. `templates/recommendations.html` lists suggested follow-ups. `templates/edit_entry.html` edits existing entries.
- `main.py` runs the FastAPI app with `uvicorn` for local development. `requirements.txt` pins FastAPI, Uvicorn, httpx, Jinja2, OpenAI, and Pydantic.

Next steps:

- Stub out scheduling/LLM integration once APIs are defined.
- Persist conversation history in a real datastore when requirements solidify.
- Flesh out user management beyond the hard-coded list and improve Google account provisioning.
