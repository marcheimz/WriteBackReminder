#!/usr/bin/env python3
"""Upload a small test object to an S3-compatible bucket."""
from __future__ import annotations

import argparse
import io
import sys
from datetime import datetime, timezone
from typing import Optional

import boto3
from botocore.exceptions import BotoCoreError, ClientError


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Upload a single test object to an S3-compatible endpoint."
    )
    parser.add_argument("--endpoint", required=True, help="Endpoint URL (e.g. https://t3.storage.dev)")
    parser.add_argument("--bucket", required=True, help="Bucket name to write to")
    parser.add_argument("--access-key", required=True, help="Access key ID")
    parser.add_argument(
        "--secret-key",
        required=True,
        help="Secret access key (for Tigris this is the long secret that starts with tsk_...)",
    )
    parser.add_argument(
        "--object-key",
        default=None,
        help="Key to use within the bucket (default: autogenerated under test/)",
    )
    parser.add_argument(
        "--payload",
        default=None,
        help="Optional path to a file whose contents you want to upload instead of the autogenerated message.",
    )
    return parser.parse_args()


def build_payload(path: Optional[str]) -> tuple[bytes, str]:
    """Return payload bytes and a description of the payload."""
    if path:
        with open(path, "rb") as fh:
            data = fh.read()
        return data, f"contents of {path}"

    now = datetime.now(timezone.utc).isoformat()
    message = (
        f"WriteBackReminder S3 connectivity test\n"
        f"Generated at: {now}\n"
    )
    return message.encode("utf-8"), "autogenerated test message"


def main() -> int:
    args = parse_args()
    data, description = build_payload(args.payload)

    session = boto3.session.Session()
    client = session.client(
        "s3",
        endpoint_url=args.endpoint,
        aws_access_key_id=args.access_key,
        aws_secret_access_key=args.secret_key,
    )

    object_key = args.object_key
    if not object_key:
        timestamp = datetime.now(timezone.utc).strftime("%Y%m%dT%H%M%SZ")
        object_key = f"test/writebackreminder-{timestamp}.txt"

    try:
        client.put_object(
            Bucket=args.bucket,
            Key=object_key,
            Body=io.BytesIO(data),
            ContentType="text/plain; charset=utf-8",
        )
    except (ClientError, BotoCoreError) as exc:
        print(f"Upload failed: {exc}", file=sys.stderr)
        return 1

    print(f"Uploaded {description} ({len(data)} bytes) to s3://{args.bucket}/{object_key}")
    print(f"Endpoint: {args.endpoint}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
